import asyncio
import logging
from typing import Optional

from apps.pandora.api import Pandora
import core.tg_msg as tg_msg
from core import settings
from core.config import bot

logger = logging.getLogger(__name__)


class ColdStart:
    def __init__(self, test: bool = False):
        self.pandora: Optional[Pandora] = None
        self.heater_on = False
        self.__test = test
        self.heater_retries = 2

    # ---------------------------
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    # ---------------------------
    async def begin(self):
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        async with Pandora() as pandora:
            self.pandora = pandora
            await self._initialize_state()

            if self.pandora.state.engine_on:
                await self._notify("–î–≤–∏–≥–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return

            if self._is_cold_start_condition():
                await self._handle_cold_start()
            else:
                await self._handle_warm_start()

    # ---------------------------
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # ---------------------------
    async def _initialize_state(self):
        await self.pandora.check()
        self.pandora.state.engine_temp_before = self.pandora.state.engine_temp
        self.pandora.state.voltage_before = self.pandora.state.voltage

        self._log_state()
        await tg_msg.msg_params(self.pandora.state)

    # ---------------------------
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
    # ---------------------------
    def _is_cold_start_condition(self) -> bool:
        condition = (
            self.pandora.state.out_temp <= 5,
            self.pandora.state.engine_temp_before < 30,
        )
        return all(condition)

    # ---------------------------
    # –•–æ–ª–æ–¥–Ω—ã–π –∑–∞–ø—É—Å–∫
    # ---------------------------
    async def _handle_cold_start(self):
        logger.info("–•–æ–ª–æ–¥–Ω–∞—è –ø–æ–≥–æ–¥–∞ –∏ —Ö–æ–ª–æ–¥–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤")
        await tg_msg.msg_cold_start()

        success = await self._try_start_heater()
        if not success:
            await self._start_without_heater()
            return

        await self._wait_for_warmup()

    # ---------------------------
    # –¢—ë–ø–ª—ã–π –∑–∞–ø—É—Å–∫
    # ---------------------------
    async def _handle_warm_start(self):
        logger.info("–£—Å–ª–æ–≤–∏—è —Ç—ë–ø–ª–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ‚Äî –∑–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–æ–≥—Ä–µ–≤–∞")
        await tg_msg.msg_normal_start(self.pandora.state)
        await self._safe_start_engine()

    # ---------------------------
    # –ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å
    # ---------------------------
    async def _try_start_heater(self) -> bool:
        self.pandora.state.count = 0
        for attempt in range(1, self.heater_retries + 1):
            logger.info(
                f"–ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—è ({attempt}/{self.heater_retries})"
            )
            await self._start_heater()
            if self.heater_on:
                return True
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å")
        return False

    # ---------------------------
    # –ó–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—è
    # ---------------------------
    async def _start_without_heater(self):
        await tg_msg.msg_start_wo_heater(self.pandora.state)
        await self._safe_start_engine()

    # ---------------------------
    # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞
    # ---------------------------
    async def _wait_for_warmup(self):
        self.pandora.state.count = 0
        start_temp = self.pandora.state.engine_temp

        while self.pandora.state.engine_temp < 20 and self.pandora.state.count < 15:
            self.pandora.state.count += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é
            if self.pandora.state.engine_on:
                await self._notify(
                    "‚úÖ –î–≤–∏–≥–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞"
                )
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Ü–∏–∫–ª–æ–≤
            if self.pandora.state.count == 5:
                await self._second_check_heater(start_temp)

            await self._log_wait_state()
            await asyncio.sleep(120)
            await self.pandora.check()

        if self.pandora.state.engine_temp >= 20:
            await self._ready_to_start()
        else:
            await self._notify(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è"
            )

    # ---------------------------
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—è
    # ---------------------------
    async def _second_check_heater(self, start_temp: float):
        if self.pandora.state.engine_temp < start_temp + 5:
            logger.warning(
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 5¬∞C –∑–∞ 5 —Ü–∏–∫–ª–æ–≤ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å"
            )
            await self._notify(
                "‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ —Ä–∞—Å—Ç—ë—Ç ‚Äî –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å"
            )

            await self._start_heater()
            if not self.heater_on:
                await self._notify(
                    "üöó –ü–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∫–ª—é—á–∏–ª—Å—è ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è"
                )
                await self._safe_start_engine()

    # ---------------------------
    # –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—è
    # ---------------------------
    async def _start_heater(self) -> bool:
        logger.info("–í–∫–ª—é—á–∞–µ–º –ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è")
        if not self.__test:
            await self.pandora.start_heater()
        await asyncio.sleep(180)
        return await self._check_heater()

    async def _check_heater(self) -> bool:
        self.heater_on = False
        await self.pandora.check()
        delta_v = self.pandora.state.voltage_before - self.pandora.state.voltage
        if delta_v >= 0.2:
            self.heater_on = True
            logger.info("–ü–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.warning("–ü–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∫–ª—é—á–∏–ª—Å—è")
        return self.heater_on

    # ---------------------------
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ–≤–∞
    # ---------------------------
    async def _ready_to_start(self):
        logger.info("–î–≤–∏–≥–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º")
        await tg_msg.msg_ready(self.pandora.state)
        await self._safe_start_engine()

    # ---------------------------
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # ---------------------------
    async def _safe_start_engine(self):
        if not self.__test:
            await self.pandora.start_engine()

    @staticmethod
    async def _notify(text: str):
        logger.info(text)
        await bot.send_message(chat_id=settings.telegram.admin_chat_id, text=text)

    def _log_state(self):
        s = self.pandora.state
        logger.info(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è: {s.engine_temp_before}¬∞C")
        logger.info(f"–ù–∞—Ä—É–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {s.out_temp}¬∞C")
        logger.info(f"–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: {s.voltage_before}V")

    async def _log_wait_state(self):
        logger.info(
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è: {self.pandora.state.engine_temp}¬∞C ‚Äî –∂–¥—ë–º –ø—Ä–æ–≥—Ä–µ–≤–∞"
        )
        await tg_msg.msg_wait(self.pandora.state)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def _test():
    await ColdStart(test=True).begin()


if __name__ == "__main__":
    asyncio.run(_test())
